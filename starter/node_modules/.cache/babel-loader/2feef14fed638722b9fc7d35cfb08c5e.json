{"ast":null,"code":"var _jsxFileName = \"D:\\\\randa\\\\FWD\\\\nd0191-c1-myreads-1\\\\starter\\\\src\\\\Component\\\\EachBook.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as BookApi from \"../BooksAPI\";\nimport DropDown from \"./DropDown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EachBook({\n  book,\n  bookshelf,\n  addBook,\n  updateBook\n}) {\n  const handleSelectChange = e => {\n    if (bookshelf) {\n      // if the user choose the same bookshelf\n      if (bookshelf === e.target.value) return; //get the book current shelf and remove it\n\n      RemoveBookFromSheilf(bookshelf);\n    } ////////////// after removing the book from other shelf////////\n    //adding the book to the new  shelf\n\n\n    if (e.target.value !== \"none\") {\n      const updatingBookSelf = JSON.parse(localStorage.getItem(e.target.value)); //adding the book to the array\n\n      updatingBookSelf.push(book);\n      BookApi.update(book, e.target.value);\n      localStorage.setItem(e.target.value, JSON.stringify(updatingBookSelf)); //To setSate in HomeScreen\n\n      addBook && addBook(e.target.value, updatingBookSelf);\n      updateBook(e.target.value);\n    }\n  };\n\n  const RemoveBookFromSheilf = categoryOfBook => {\n    let Bookarray = JSON.parse(localStorage.getItem(categoryOfBook));\n    let switchedIndex = Bookarray.findIndex(e => e.id === book.id);\n\n    if (switchedIndex > -1) {\n      Bookarray.splice(switchedIndex, 1);\n      localStorage.setItem(categoryOfBook, JSON.stringify(Bookarray));\n      addBook && addBook(categoryOfBook, Bookarray);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"book\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"book-top\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"book-cover\",\n          style: {\n            width: 128,\n            height: 193,\n            backgroundImage: book.imageLinks && `url(${book.imageLinks.thumbnail})`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DropDown, {\n          value: bookshelf,\n          handleSelectChange: handleSelectChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"book-title\",\n        children: book.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), book.authors && book.authors.map((val, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"book-authors\",\n          children: val\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_c = EachBook;\nEachBook.propTypes = {\n  book: PropTypes.object.isRequired,\n  addBook: PropTypes.func,\n  bookshelf: PropTypes.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"EachBook\");","map":{"version":3,"sources":["D:/randa/FWD/nd0191-c1-myreads-1/starter/src/Component/EachBook.jsx"],"names":["React","PropTypes","BookApi","DropDown","EachBook","book","bookshelf","addBook","updateBook","handleSelectChange","e","target","value","RemoveBookFromSheilf","updatingBookSelf","JSON","parse","localStorage","getItem","push","update","setItem","stringify","categoryOfBook","Bookarray","switchedIndex","findIndex","id","splice","width","height","backgroundImage","imageLinks","thumbnail","title","authors","map","val","i","propTypes","object","isRequired","func","string"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as BookApi from \"../BooksAPI\";\r\n\r\nimport DropDown from \"./DropDown\";\r\n\r\nexport default function EachBook({ book, bookshelf, addBook, updateBook }) {\r\n  const handleSelectChange = (e) => {\r\n    if (bookshelf) {\r\n      // if the user choose the same bookshelf\r\n      if (bookshelf === e.target.value) return;\r\n\r\n      //get the book current shelf and remove it\r\n      RemoveBookFromSheilf(bookshelf);\r\n    }\r\n\r\n    ////////////// after removing the book from other shelf////////\r\n    //adding the book to the new  shelf\r\n    if (e.target.value !== \"none\") {\r\n      const updatingBookSelf = JSON.parse(localStorage.getItem(e.target.value));\r\n\r\n      //adding the book to the array\r\n      updatingBookSelf.push(book);\r\n      BookApi.update(book, e.target.value);\r\n      localStorage.setItem(e.target.value, JSON.stringify(updatingBookSelf));\r\n\r\n      //To setSate in HomeScreen\r\n      addBook && addBook(e.target.value, updatingBookSelf);\r\n\r\n      updateBook(e.target.value);\r\n    }\r\n  };\r\n\r\n  const RemoveBookFromSheilf = (categoryOfBook) => {\r\n    let Bookarray = JSON.parse(localStorage.getItem(categoryOfBook));\r\n    let switchedIndex = Bookarray.findIndex((e) => e.id === book.id);\r\n    if (switchedIndex > -1) {\r\n      Bookarray.splice(switchedIndex, 1);\r\n      localStorage.setItem(categoryOfBook, JSON.stringify(Bookarray));\r\n      addBook && addBook(categoryOfBook, Bookarray);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <li>\r\n      <div className='book'>\r\n        <div className='book-top'>\r\n          <div\r\n            className='book-cover'\r\n            style={{\r\n              width: 128,\r\n              height: 193,\r\n              backgroundImage:\r\n                book.imageLinks && `url(${book.imageLinks.thumbnail})`,\r\n            }}></div>\r\n          <DropDown value={bookshelf} handleSelectChange={handleSelectChange} />\r\n        </div>\r\n        <div className='book-title'>{book.title}</div>\r\n        {book.authors &&\r\n          book.authors.map((val, i) => {\r\n            return (\r\n              <div key={i} className='book-authors'>\r\n                {val}\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\nEachBook.propTypes = {\r\n  book: PropTypes.object.isRequired,\r\n  addBook: PropTypes.func,\r\n  bookshelf: PropTypes.string,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}